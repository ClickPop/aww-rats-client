/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type { TypedEventFilter, TypedEvent, TypedListener } from './common';

interface ClosetLibraryInterface extends ethers.utils.Interface {
  functions: {
    '_compareStrings(string,string)': FunctionFragment;
    'trimClosetTokenArray(uint256,tuple[])': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: '_compareStrings',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'trimClosetTokenArray',
    values: [
      BigNumberish,
      {
        id: BigNumberish;
        supply: BigNumberish;
        amount: BigNumberish;
        token: {
          name: string;
          cost: BigNumberish;
          maxTokens: BigNumberish;
          maxPerWallet: BigNumberish;
          active: boolean;
          revShareAddress: string;
          revShareAmount: [BigNumberish, BigNumberish];
        };
      }[],
    ],
  ): string;

  decodeFunctionResult(
    functionFragment: '_compareStrings',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'trimClosetTokenArray',
    data: BytesLike,
  ): Result;

  events: {};
}

export class ClosetLibrary extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ClosetLibraryInterface;

  functions: {
    _compareStrings(
      str1: string,
      str2: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    trimClosetTokenArray(
      length: BigNumberish,
      tokens: {
        id: BigNumberish;
        supply: BigNumberish;
        amount: BigNumberish;
        token: {
          name: string;
          cost: BigNumberish;
          maxTokens: BigNumberish;
          maxPerWallet: BigNumberish;
          active: boolean;
          revShareAddress: string;
          revShareAmount: [BigNumberish, BigNumberish];
        };
      }[],
      overrides?: CallOverrides,
    ): Promise<
      [
        ([
          BigNumber,
          BigNumber,
          BigNumber,
          [
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            boolean,
            string,
            [BigNumber, BigNumber],
          ] & {
            name: string;
            cost: BigNumber;
            maxTokens: BigNumber;
            maxPerWallet: BigNumber;
            active: boolean;
            revShareAddress: string;
            revShareAmount: [BigNumber, BigNumber];
          },
        ] & {
          id: BigNumber;
          supply: BigNumber;
          amount: BigNumber;
          token: [
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            boolean,
            string,
            [BigNumber, BigNumber],
          ] & {
            name: string;
            cost: BigNumber;
            maxTokens: BigNumber;
            maxPerWallet: BigNumber;
            active: boolean;
            revShareAddress: string;
            revShareAmount: [BigNumber, BigNumber];
          };
        })[],
      ]
    >;
  };

  _compareStrings(
    str1: string,
    str2: string,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  trimClosetTokenArray(
    length: BigNumberish,
    tokens: {
      id: BigNumberish;
      supply: BigNumberish;
      amount: BigNumberish;
      token: {
        name: string;
        cost: BigNumberish;
        maxTokens: BigNumberish;
        maxPerWallet: BigNumberish;
        active: boolean;
        revShareAddress: string;
        revShareAmount: [BigNumberish, BigNumberish];
      };
    }[],
    overrides?: CallOverrides,
  ): Promise<
    ([
      BigNumber,
      BigNumber,
      BigNumber,
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string,
        [BigNumber, BigNumber],
      ] & {
        name: string;
        cost: BigNumber;
        maxTokens: BigNumber;
        maxPerWallet: BigNumber;
        active: boolean;
        revShareAddress: string;
        revShareAmount: [BigNumber, BigNumber];
      },
    ] & {
      id: BigNumber;
      supply: BigNumber;
      amount: BigNumber;
      token: [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string,
        [BigNumber, BigNumber],
      ] & {
        name: string;
        cost: BigNumber;
        maxTokens: BigNumber;
        maxPerWallet: BigNumber;
        active: boolean;
        revShareAddress: string;
        revShareAmount: [BigNumber, BigNumber];
      };
    })[]
  >;

  callStatic: {
    _compareStrings(
      str1: string,
      str2: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    trimClosetTokenArray(
      length: BigNumberish,
      tokens: {
        id: BigNumberish;
        supply: BigNumberish;
        amount: BigNumberish;
        token: {
          name: string;
          cost: BigNumberish;
          maxTokens: BigNumberish;
          maxPerWallet: BigNumberish;
          active: boolean;
          revShareAddress: string;
          revShareAmount: [BigNumberish, BigNumberish];
        };
      }[],
      overrides?: CallOverrides,
    ): Promise<
      ([
        BigNumber,
        BigNumber,
        BigNumber,
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          string,
          [BigNumber, BigNumber],
        ] & {
          name: string;
          cost: BigNumber;
          maxTokens: BigNumber;
          maxPerWallet: BigNumber;
          active: boolean;
          revShareAddress: string;
          revShareAmount: [BigNumber, BigNumber];
        },
      ] & {
        id: BigNumber;
        supply: BigNumber;
        amount: BigNumber;
        token: [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          string,
          [BigNumber, BigNumber],
        ] & {
          name: string;
          cost: BigNumber;
          maxTokens: BigNumber;
          maxPerWallet: BigNumber;
          active: boolean;
          revShareAddress: string;
          revShareAmount: [BigNumber, BigNumber];
        };
      })[]
    >;
  };

  filters: {};

  estimateGas: {
    _compareStrings(
      str1: string,
      str2: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    trimClosetTokenArray(
      length: BigNumberish,
      tokens: {
        id: BigNumberish;
        supply: BigNumberish;
        amount: BigNumberish;
        token: {
          name: string;
          cost: BigNumberish;
          maxTokens: BigNumberish;
          maxPerWallet: BigNumberish;
          active: boolean;
          revShareAddress: string;
          revShareAmount: [BigNumberish, BigNumberish];
        };
      }[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _compareStrings(
      str1: string,
      str2: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    trimClosetTokenArray(
      length: BigNumberish,
      tokens: {
        id: BigNumberish;
        supply: BigNumberish;
        amount: BigNumberish;
        token: {
          name: string;
          cost: BigNumberish;
          maxTokens: BigNumberish;
          maxPerWallet: BigNumberish;
          active: boolean;
          revShareAddress: string;
          revShareAmount: [BigNumberish, BigNumberish];
        };
      }[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
