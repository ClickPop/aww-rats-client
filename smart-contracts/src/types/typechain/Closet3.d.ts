/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface Closet3Interface extends ethers.utils.Interface {
  functions: {
    "addNewTokenTypes(tuple[])": FunctionFragment;
    "anotherTest()": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "banWallet(address,string)": FunctionFragment;
    "burn(uint256,uint256)": FunctionFragment;
    "burnBatch(uint256[],uint256[])": FunctionFragment;
    "changeERC20Contract(address)": FunctionFragment;
    "changeTokens(tuple[])": FunctionFragment;
    "contractURI()": FunctionFragment;
    "erc20()": FunctionFragment;
    "existingTokenIds(uint256)": FunctionFragment;
    "exists(uint256)": FunctionFragment;
    "getActiveTokens()": FunctionFragment;
    "getAllTokenIds()": FunctionFragment;
    "getAllTokens()": FunctionFragment;
    "getTokenById(uint256)": FunctionFragment;
    "getTokensByWallet(address)": FunctionFragment;
    "initialize()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "maxTokensPerWalletById(uint256,address)": FunctionFragment;
    "mint(uint256,uint256)": FunctionFragment;
    "mintBatch(uint256[],uint256[])": FunctionFragment;
    "owner()": FunctionFragment;
    "promoMint(uint256[],uint256[],address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setAnotherTest(string)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setContractURI(string)": FunctionFragment;
    "setMaxTokensForWallet(address,uint256,uint256)": FunctionFragment;
    "setTest(string)": FunctionFragment;
    "setTokensStatus(uint256[],bool)": FunctionFragment;
    "setUri(string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "test()": FunctionFragment;
    "totalSupply(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unbanWallet(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
    "version()": FunctionFragment;
    "walletBans(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addNewTokenTypes",
    values: [
      {
        name: string;
        cost: BigNumberish;
        maxTokens: BigNumberish;
        maxPerWallet: BigNumberish;
        active: boolean;
        revShareAddress: string;
        revShareAmount: [BigNumberish, BigNumberish];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "anotherTest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "banWallet",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnBatch",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "changeERC20Contract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeTokens",
    values: [
      {
        id: BigNumberish;
        token: {
          name: string;
          cost: BigNumberish;
          maxTokens: BigNumberish;
          maxPerWallet: BigNumberish;
          active: boolean;
          revShareAddress: string;
          revShareAmount: [BigNumberish, BigNumberish];
        };
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "erc20", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "existingTokenIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTokenIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensByWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxTokensPerWalletById",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBatch",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "promoMint",
    values: [BigNumberish[], BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAnotherTest",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTokensForWallet",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setTest", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setTokensStatus",
    values: [BigNumberish[], boolean]
  ): string;
  encodeFunctionData(functionFragment: "setUri", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "test", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unbanWallet", values: [string]): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "walletBans", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "addNewTokenTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "anotherTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "banWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeERC20Contract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "erc20", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "existingTokenIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActiveTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllTokenIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensByWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTokensPerWalletById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintBatch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "promoMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAnotherTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTokensForWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokensStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUri", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "test", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unbanWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "walletBans", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "BatchTokensBurned(uint256[],uint256[],address)": EventFragment;
    "BatchTokensMinted(uint256[],uint256[],address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "ChangeERC20Contract(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TokenTypeAdded(uint256,tuple)": EventFragment;
    "TokenTypeChanged(uint256,tuple)": EventFragment;
    "TokensBurned(uint256,uint256,address)": EventFragment;
    "TokensMinted(uint256,uint256,address)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
    "WalletBanned(address,string)": EventFragment;
    "WalletMaxChanged(address,uint256,uint256)": EventFragment;
    "WalletUnbanned(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BatchTokensBurned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BatchTokensMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeERC20Contract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenTypeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenTypeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensBurned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WalletBanned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WalletMaxChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WalletUnbanned"): EventFragment;
}

export class Closet3 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: Closet3Interface;

  functions: {
    addNewTokenTypes(
      tokens: {
        name: string;
        cost: BigNumberish;
        maxTokens: BigNumberish;
        maxPerWallet: BigNumberish;
        active: boolean;
        revShareAddress: string;
        revShareAmount: [BigNumberish, BigNumberish];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    anotherTest(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    banWallet(
      wallet: string,
      reason: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burn(
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnBatch(
      ids: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeERC20Contract(
      erc20Addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeTokens(
      tokens: {
        id: BigNumberish;
        token: {
          name: string;
          cost: BigNumberish;
          maxTokens: BigNumberish;
          maxPerWallet: BigNumberish;
          active: boolean;
          revShareAddress: string;
          revShareAmount: [BigNumberish, BigNumberish];
        };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contractURI(overrides?: CallOverrides): Promise<[string]>;

    erc20(overrides?: CallOverrides): Promise<[string]>;

    existingTokenIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    exists(id: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    getActiveTokens(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          [
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            boolean,
            string,
            [BigNumber, BigNumber]
          ] & {
            name: string;
            cost: BigNumber;
            maxTokens: BigNumber;
            maxPerWallet: BigNumber;
            active: boolean;
            revShareAddress: string;
            revShareAmount: [BigNumber, BigNumber];
          }
        ] & {
          id: BigNumber;
          token: [
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            boolean,
            string,
            [BigNumber, BigNumber]
          ] & {
            name: string;
            cost: BigNumber;
            maxTokens: BigNumber;
            maxPerWallet: BigNumber;
            active: boolean;
            revShareAddress: string;
            revShareAmount: [BigNumber, BigNumber];
          };
        })[]
      ]
    >;

    getAllTokenIds(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getAllTokens(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          [
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            boolean,
            string,
            [BigNumber, BigNumber]
          ] & {
            name: string;
            cost: BigNumber;
            maxTokens: BigNumber;
            maxPerWallet: BigNumber;
            active: boolean;
            revShareAddress: string;
            revShareAmount: [BigNumber, BigNumber];
          }
        ] & {
          id: BigNumber;
          token: [
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            boolean,
            string,
            [BigNumber, BigNumber]
          ] & {
            name: string;
            cost: BigNumber;
            maxTokens: BigNumber;
            maxPerWallet: BigNumber;
            active: boolean;
            revShareAddress: string;
            revShareAmount: [BigNumber, BigNumber];
          };
        })[]
      ]
    >;

    getTokenById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          string,
          [BigNumber, BigNumber]
        ] & {
          name: string;
          cost: BigNumber;
          maxTokens: BigNumber;
          maxPerWallet: BigNumber;
          active: boolean;
          revShareAddress: string;
          revShareAmount: [BigNumber, BigNumber];
        }
      ]
    >;

    getTokensByWallet(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          BigNumber,
          [
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            boolean,
            string,
            [BigNumber, BigNumber]
          ] & {
            name: string;
            cost: BigNumber;
            maxTokens: BigNumber;
            maxPerWallet: BigNumber;
            active: boolean;
            revShareAddress: string;
            revShareAmount: [BigNumber, BigNumber];
          }
        ] & {
          id: BigNumber;
          amount: BigNumber;
          token: [
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            boolean,
            string,
            [BigNumber, BigNumber]
          ] & {
            name: string;
            cost: BigNumber;
            maxTokens: BigNumber;
            maxPerWallet: BigNumber;
            active: boolean;
            revShareAddress: string;
            revShareAmount: [BigNumber, BigNumber];
          };
        })[]
      ]
    >;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxTokensPerWalletById(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mint(
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintBatch(
      ids: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    promoMint(
      ids: BigNumberish[],
      amounts: BigNumberish[],
      wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAnotherTest(
      _test: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setContractURI(
      newContractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxTokensForWallet(
      wallet: string,
      tokenId: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTest(
      _test: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokensStatus(
      ids: BigNumberish[],
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUri(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    test(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unbanWallet(
      wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    version(overrides?: CallOverrides): Promise<[string]>;

    walletBans(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { banned: boolean; reason: string }>;
  };

  addNewTokenTypes(
    tokens: {
      name: string;
      cost: BigNumberish;
      maxTokens: BigNumberish;
      maxPerWallet: BigNumberish;
      active: boolean;
      revShareAddress: string;
      revShareAmount: [BigNumberish, BigNumberish];
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  anotherTest(overrides?: CallOverrides): Promise<string>;

  balanceOf(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  banWallet(
    wallet: string,
    reason: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burn(
    tokenId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnBatch(
    ids: BigNumberish[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeERC20Contract(
    erc20Addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeTokens(
    tokens: {
      id: BigNumberish;
      token: {
        name: string;
        cost: BigNumberish;
        maxTokens: BigNumberish;
        maxPerWallet: BigNumberish;
        active: boolean;
        revShareAddress: string;
        revShareAmount: [BigNumberish, BigNumberish];
      };
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contractURI(overrides?: CallOverrides): Promise<string>;

  erc20(overrides?: CallOverrides): Promise<string>;

  existingTokenIds(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  exists(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  getActiveTokens(
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string,
        [BigNumber, BigNumber]
      ] & {
        name: string;
        cost: BigNumber;
        maxTokens: BigNumber;
        maxPerWallet: BigNumber;
        active: boolean;
        revShareAddress: string;
        revShareAmount: [BigNumber, BigNumber];
      }
    ] & {
      id: BigNumber;
      token: [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string,
        [BigNumber, BigNumber]
      ] & {
        name: string;
        cost: BigNumber;
        maxTokens: BigNumber;
        maxPerWallet: BigNumber;
        active: boolean;
        revShareAddress: string;
        revShareAmount: [BigNumber, BigNumber];
      };
    })[]
  >;

  getAllTokenIds(overrides?: CallOverrides): Promise<BigNumber[]>;

  getAllTokens(
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string,
        [BigNumber, BigNumber]
      ] & {
        name: string;
        cost: BigNumber;
        maxTokens: BigNumber;
        maxPerWallet: BigNumber;
        active: boolean;
        revShareAddress: string;
        revShareAmount: [BigNumber, BigNumber];
      }
    ] & {
      id: BigNumber;
      token: [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string,
        [BigNumber, BigNumber]
      ] & {
        name: string;
        cost: BigNumber;
        maxTokens: BigNumber;
        maxPerWallet: BigNumber;
        active: boolean;
        revShareAddress: string;
        revShareAmount: [BigNumber, BigNumber];
      };
    })[]
  >;

  getTokenById(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      string,
      [BigNumber, BigNumber]
    ] & {
      name: string;
      cost: BigNumber;
      maxTokens: BigNumber;
      maxPerWallet: BigNumber;
      active: boolean;
      revShareAddress: string;
      revShareAmount: [BigNumber, BigNumber];
    }
  >;

  getTokensByWallet(
    wallet: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      BigNumber,
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string,
        [BigNumber, BigNumber]
      ] & {
        name: string;
        cost: BigNumber;
        maxTokens: BigNumber;
        maxPerWallet: BigNumber;
        active: boolean;
        revShareAddress: string;
        revShareAmount: [BigNumber, BigNumber];
      }
    ] & {
      id: BigNumber;
      amount: BigNumber;
      token: [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string,
        [BigNumber, BigNumber]
      ] & {
        name: string;
        cost: BigNumber;
        maxTokens: BigNumber;
        maxPerWallet: BigNumber;
        active: boolean;
        revShareAddress: string;
        revShareAmount: [BigNumber, BigNumber];
      };
    })[]
  >;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maxTokensPerWalletById(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mint(
    tokenId: BigNumberish,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintBatch(
    ids: BigNumberish[],
    amounts: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  promoMint(
    ids: BigNumberish[],
    amounts: BigNumberish[],
    wallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAnotherTest(
    _test: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setContractURI(
    newContractURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxTokensForWallet(
    wallet: string,
    tokenId: BigNumberish,
    max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTest(
    _test: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokensStatus(
    ids: BigNumberish[],
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUri(
    uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  test(overrides?: CallOverrides): Promise<string>;

  totalSupply(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unbanWallet(
    wallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  version(overrides?: CallOverrides): Promise<string>;

  walletBans(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { banned: boolean; reason: string }>;

  callStatic: {
    addNewTokenTypes(
      tokens: {
        name: string;
        cost: BigNumberish;
        maxTokens: BigNumberish;
        maxPerWallet: BigNumberish;
        active: boolean;
        revShareAddress: string;
        revShareAmount: [BigNumberish, BigNumberish];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    anotherTest(overrides?: CallOverrides): Promise<string>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    banWallet(
      wallet: string,
      reason: string,
      overrides?: CallOverrides
    ): Promise<void>;

    burn(
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    burnBatch(
      ids: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    changeERC20Contract(
      erc20Addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeTokens(
      tokens: {
        id: BigNumberish;
        token: {
          name: string;
          cost: BigNumberish;
          maxTokens: BigNumberish;
          maxPerWallet: BigNumberish;
          active: boolean;
          revShareAddress: string;
          revShareAmount: [BigNumberish, BigNumberish];
        };
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    contractURI(overrides?: CallOverrides): Promise<string>;

    erc20(overrides?: CallOverrides): Promise<string>;

    existingTokenIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exists(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    getActiveTokens(
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          string,
          [BigNumber, BigNumber]
        ] & {
          name: string;
          cost: BigNumber;
          maxTokens: BigNumber;
          maxPerWallet: BigNumber;
          active: boolean;
          revShareAddress: string;
          revShareAmount: [BigNumber, BigNumber];
        }
      ] & {
        id: BigNumber;
        token: [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          string,
          [BigNumber, BigNumber]
        ] & {
          name: string;
          cost: BigNumber;
          maxTokens: BigNumber;
          maxPerWallet: BigNumber;
          active: boolean;
          revShareAddress: string;
          revShareAmount: [BigNumber, BigNumber];
        };
      })[]
    >;

    getAllTokenIds(overrides?: CallOverrides): Promise<BigNumber[]>;

    getAllTokens(
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          string,
          [BigNumber, BigNumber]
        ] & {
          name: string;
          cost: BigNumber;
          maxTokens: BigNumber;
          maxPerWallet: BigNumber;
          active: boolean;
          revShareAddress: string;
          revShareAmount: [BigNumber, BigNumber];
        }
      ] & {
        id: BigNumber;
        token: [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          string,
          [BigNumber, BigNumber]
        ] & {
          name: string;
          cost: BigNumber;
          maxTokens: BigNumber;
          maxPerWallet: BigNumber;
          active: boolean;
          revShareAddress: string;
          revShareAmount: [BigNumber, BigNumber];
        };
      })[]
    >;

    getTokenById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string,
        [BigNumber, BigNumber]
      ] & {
        name: string;
        cost: BigNumber;
        maxTokens: BigNumber;
        maxPerWallet: BigNumber;
        active: boolean;
        revShareAddress: string;
        revShareAmount: [BigNumber, BigNumber];
      }
    >;

    getTokensByWallet(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        BigNumber,
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          string,
          [BigNumber, BigNumber]
        ] & {
          name: string;
          cost: BigNumber;
          maxTokens: BigNumber;
          maxPerWallet: BigNumber;
          active: boolean;
          revShareAddress: string;
          revShareAmount: [BigNumber, BigNumber];
        }
      ] & {
        id: BigNumber;
        amount: BigNumber;
        token: [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          string,
          [BigNumber, BigNumber]
        ] & {
          name: string;
          cost: BigNumber;
          maxTokens: BigNumber;
          maxPerWallet: BigNumber;
          active: boolean;
          revShareAddress: string;
          revShareAmount: [BigNumber, BigNumber];
        };
      })[]
    >;

    initialize(overrides?: CallOverrides): Promise<void>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxTokensPerWalletById(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintBatch(
      ids: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    promoMint(
      ids: BigNumberish[],
      amounts: BigNumberish[],
      wallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setAnotherTest(_test: string, overrides?: CallOverrides): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setContractURI(
      newContractURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTokensForWallet(
      wallet: string,
      tokenId: BigNumberish,
      max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTest(_test: string, overrides?: CallOverrides): Promise<void>;

    setTokensStatus(
      ids: BigNumberish[],
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setUri(uri: string, overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    test(overrides?: CallOverrides): Promise<string>;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unbanWallet(wallet: string, overrides?: CallOverrides): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    version(overrides?: CallOverrides): Promise<string>;

    walletBans(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { banned: boolean; reason: string }>;
  };

  filters: {
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    ApprovalForAll(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { account: string; operator: string; approved: boolean }
    >;

    BatchTokensBurned(
      tokenIds?: null,
      amounts?: null,
      wallet?: null
    ): TypedEventFilter<
      [BigNumber[], BigNumber[], string],
      { tokenIds: BigNumber[]; amounts: BigNumber[]; wallet: string }
    >;

    BatchTokensMinted(
      tokenIds?: null,
      amounts?: null,
      wallet?: null
    ): TypedEventFilter<
      [BigNumber[], BigNumber[], string],
      { tokenIds: BigNumber[]; amounts: BigNumber[]; wallet: string }
    >;

    BeaconUpgraded(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    ChangeERC20Contract(
      erc20Addr?: null
    ): TypedEventFilter<[string], { erc20Addr: string }>;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    TokenTypeAdded(
      tokenId?: null,
      token?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          string,
          [BigNumber, BigNumber]
        ] & {
          name: string;
          cost: BigNumber;
          maxTokens: BigNumber;
          maxPerWallet: BigNumber;
          active: boolean;
          revShareAddress: string;
          revShareAmount: [BigNumber, BigNumber];
        }
      ],
      {
        tokenId: BigNumber;
        token: [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          string,
          [BigNumber, BigNumber]
        ] & {
          name: string;
          cost: BigNumber;
          maxTokens: BigNumber;
          maxPerWallet: BigNumber;
          active: boolean;
          revShareAddress: string;
          revShareAmount: [BigNumber, BigNumber];
        };
      }
    >;

    TokenTypeChanged(
      tokenId?: null,
      token?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          string,
          [BigNumber, BigNumber]
        ] & {
          name: string;
          cost: BigNumber;
          maxTokens: BigNumber;
          maxPerWallet: BigNumber;
          active: boolean;
          revShareAddress: string;
          revShareAmount: [BigNumber, BigNumber];
        }
      ],
      {
        tokenId: BigNumber;
        token: [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          string,
          [BigNumber, BigNumber]
        ] & {
          name: string;
          cost: BigNumber;
          maxTokens: BigNumber;
          maxPerWallet: BigNumber;
          active: boolean;
          revShareAddress: string;
          revShareAmount: [BigNumber, BigNumber];
        };
      }
    >;

    TokensBurned(
      tokenId?: null,
      amount?: null,
      wallet?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { tokenId: BigNumber; amount: BigNumber; wallet: string }
    >;

    TokensMinted(
      tokenId?: null,
      amount?: null,
      wallet?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { tokenId: BigNumber; amount: BigNumber; wallet: string }
    >;

    TransferBatch(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber[], BigNumber[]],
      {
        operator: string;
        from: string;
        to: string;
        ids: BigNumber[];
        values: BigNumber[];
      }
    >;

    TransferSingle(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        operator: string;
        from: string;
        to: string;
        id: BigNumber;
        value: BigNumber;
      }
    >;

    URI(
      value?: null,
      id?: BigNumberish | null
    ): TypedEventFilter<[string, BigNumber], { value: string; id: BigNumber }>;

    Upgraded(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;

    WalletBanned(
      wallet?: null,
      reason?: null
    ): TypedEventFilter<[string, string], { wallet: string; reason: string }>;

    WalletMaxChanged(
      wallet?: null,
      tokenId?: null,
      max?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { wallet: string; tokenId: BigNumber; max: BigNumber }
    >;

    WalletUnbanned(
      wallet?: null
    ): TypedEventFilter<[string], { wallet: string }>;
  };

  estimateGas: {
    addNewTokenTypes(
      tokens: {
        name: string;
        cost: BigNumberish;
        maxTokens: BigNumberish;
        maxPerWallet: BigNumberish;
        active: boolean;
        revShareAddress: string;
        revShareAmount: [BigNumberish, BigNumberish];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    anotherTest(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    banWallet(
      wallet: string,
      reason: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burn(
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnBatch(
      ids: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeERC20Contract(
      erc20Addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeTokens(
      tokens: {
        id: BigNumberish;
        token: {
          name: string;
          cost: BigNumberish;
          maxTokens: BigNumberish;
          maxPerWallet: BigNumberish;
          active: boolean;
          revShareAddress: string;
          revShareAmount: [BigNumberish, BigNumberish];
        };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    erc20(overrides?: CallOverrides): Promise<BigNumber>;

    existingTokenIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exists(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getActiveTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getAllTokenIds(overrides?: CallOverrides): Promise<BigNumber>;

    getAllTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensByWallet(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxTokensPerWalletById(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintBatch(
      ids: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    promoMint(
      ids: BigNumberish[],
      amounts: BigNumberish[],
      wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAnotherTest(
      _test: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setContractURI(
      newContractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxTokensForWallet(
      wallet: string,
      tokenId: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTest(
      _test: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokensStatus(
      ids: BigNumberish[],
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUri(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    test(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unbanWallet(
      wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    walletBans(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addNewTokenTypes(
      tokens: {
        name: string;
        cost: BigNumberish;
        maxTokens: BigNumberish;
        maxPerWallet: BigNumberish;
        active: boolean;
        revShareAddress: string;
        revShareAmount: [BigNumberish, BigNumberish];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    anotherTest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    banWallet(
      wallet: string,
      reason: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burn(
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnBatch(
      ids: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeERC20Contract(
      erc20Addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeTokens(
      tokens: {
        id: BigNumberish;
        token: {
          name: string;
          cost: BigNumberish;
          maxTokens: BigNumberish;
          maxPerWallet: BigNumberish;
          active: boolean;
          revShareAddress: string;
          revShareAmount: [BigNumberish, BigNumberish];
        };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    erc20(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    existingTokenIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exists(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActiveTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllTokenIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokensByWallet(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxTokensPerWalletById(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintBatch(
      ids: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    promoMint(
      ids: BigNumberish[],
      amounts: BigNumberish[],
      wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAnotherTest(
      _test: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setContractURI(
      newContractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTokensForWallet(
      wallet: string,
      tokenId: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTest(
      _test: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokensStatus(
      ids: BigNumberish[],
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUri(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    test(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unbanWallet(
      wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uri(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    walletBans(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
